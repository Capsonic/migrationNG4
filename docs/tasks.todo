Frontend Migration from Angualr 1 to Angular 4:
  Services:
    ☐ AppConfig.
        ☐ A shared service to store the base URL and app name.
    ☐ localStorage.
        ☐ To do some research to find the best component for angular 4.
    ☐ AuthService.
        ☐ Login.
            ☐ Post to api/token.
            ☐ Store token on local storage.
            ☐ Retrieve user's role from backend.
        ☐ Logout.
            ☐ Remove info from local storage.
            ☐ Open login popup.
        ☐ AuthInterceptor.
            ☐ Intercept all requests and add header with token.
            ☐ Intercepl all responses and for 401 error logout.
            
    ☐ CRUDFactory.
      To Refactor from Angular 1.x:
        ☐ Function for handling all response errors.
        ☐ Known Exceptions show message instead of stack trace.
        ☐ Show Stack Trace under a Technical Details button.
        ☐ Decouple Alertify and ActivityIndicator.
        ☐ Not always trigger alertify.
        ☐ Validation Results Popup.
        ☐ Response object: Result, Message, ErrorsList, ValidationsList, AdditionalData
        ☐ Common Error Types: Modal, Message, Alert, Incident.
    -------------------------------------
    ☐ RFactory.
    ☐ HotKeys.
    ☐ RealTime.
    ☐ Exceptions.js.

  Controllers:
    ☐ formController.
        Methods:
            ☐ Accept in constructor a settings object.
                ☐ service (CRUDFactory instance)
            ☐ remove(oEntity).
                ☐ service.remove().
                ☐ afterRemove().
            ☐ createInstance().
                ☐ service.createInstance().
                ☐ afterCreate().
            ☐ on_input_change().
                ☐ baseEntity.editMode = true
            ☐ save().
                ☐ if baseEntity.editMode then service.save().
            ☐ undo().
                ☐ copy original entity from service cache to current form.
            ☐ load(oEntityOrID).
                ☐ refresh(oEntityOrID).
            ☐ refresh(oEntityOrID).
                ☐ case oEntityOrID = null/''/undefined
                    ☐ createInstance()
                    ☐ afterCreate()
                ☐ case oEntityOrID > 0:
                    ☐ service.loadEntity()
                    ☐ afterLoad()
                ☐ case oEntityOrID is an object: 
                    ☐ baseEntity = oEntityOrID
                    ☐ afterLoad()
        Hooks:
            ☐ afterLoad().
            ☐ afterCreate().
            ☐ afterRemove().
            ☐ afterSave().

    ☐ listController.
        Methods:
            ☐ Accept in constructor a settings object.
                ☐ service (CRUDFactory instance).
                ☐ paginate (enable/disable pagination).
                ☐ perPage (how many entries per page).
            ☐ Should handle fileStorageName per (endpoing and page)
                ☐ Should store filter settings.
            ☐ removeItem(oEntity).
                ☐ service.remove(oEntity, baseList).
                ☐ afterRemove().
            ☐ openItem(oEntity)
                ☐ onOpenItem().
                ☐ append any additional arguments found on openItem to onOpenItem call.
            ☐ checkItem
                ☐ toggle .selected = true/false
            ☐ removeSelected()
                ☐ remove all .selected items.
            ☐ pageChanged(newPage)
                ☐ filterOptions.page = newPage
                ☐ updateList().
            ☐ saveItem(oItem)
                ☐ service.save(oItem)
            ☐ on_input_change().
                ☐ baseEntity.editMode = true
            ☐ save()
                ☐ foreach item in baseList: saveItem() if editMode = true
            ☐ undoItem).
                ☐ copy original entity from service cache to current item.
            ☐ refresh()
                ☐ if filterOptions = null then clearFilters().
                ☐ else updateList().
            ☐ getSelectedCount() //count items where .selected = true.
            ☐ unselectAll() //set .selected = false to all items.
            ☐ selectAll() //set .selected = true to all items.
            ☐ getSelected() //get list of selected items.
            ☐ setFilterOptions()
                ☐ get from localStorage
                ☐ if filterOptions = null then clearFilters()
            ☐ persistFilter
                ☐ save current filterOptions to localStorage
            ☐ load(qParams)
                ☐ _staticQParams = qParams
                ☐ setFilterOptions()
                ☐ updateList()
            ☐ _makeQueryParameters() //make query params from filterOptions
            ☐ _updateList()
                ☐ service.getPage(perPage, page, queryParams)
                ☐ baseList = commonResponse.Result
                ☐ get itemsCount, totalItems from commonResponse.AdditionalData
                ☐ _persistFilter()
                ☐ set itemIndex for all oItems in baseList
                ☐ afterLoad()

            ☐ clearFilters()
                ☐ initialize filterOptions = 
                    {perPage: _perPage,
                    page: 1,
                    itemsCount: 0
                    }
                ☐ _persistFilter().
            ☐ go(path)
                ☐ navigate to path
            ☐ create() ??
        Hooks:
            ☐ afterLoad().
            ☐ onOpenItem().
            ☐ afterRemove().
            ☐ afterCreate()??

  Widgets/Components:
    ☐ Layout:
        ☐ Main Top Toolbar. (Login, Navigation, Logo, App Title, Notifications, ActivityIndiator).
            ☐ Navigation Menu loaded async by User Role.
        ☐ Bottom Toolbar for Lists. (Filtering, Search, Batch Remove, Create, Pagination, Sort).
        ☐ Bottom Toolbar for Single Form. (Create, Checkout, Checkin, Finalize, Delete, Print, Reload/Refresh).
    ☐ Spin Loading.
      ☐ Display Spin Loading only when certain time is exceeded.
    ☐ Pagination.
    ☐ Modal.
    ☐ Horizontal Lists sortable by Drag and Drop.
    ☐ Selectize. (Single and Multiple selection).
    ☐ Attachments.
    ☐ Buttons that do not accept double click.
    ☐ Confirm Buttons: Two actions in same space, maybe: first action just a click, second action: to slide to right.
    ☐ Alertify.
    ☐ Login.
      ☐ Login should not redirect to home.
    ☐ Selection from List.
      ☐ Responsible.
    ☐ Commenting.
    ☐ ToDos.
    ☐ Notifications.
    ☐ Send Email.
    ☐ Toggle Navigation Toolbar.
        ☐ Keep data when switching back.
    -------------------------------------
    ☐ Tables editables.
      ☐ Display/Hide set of columns for list of items and store in local storage.
    ☐ Tree-Grid sortable by Drag and Drop.
      ☐ Display/Hide set of columns for list of items and store in local storage.
    ☐ Attachments with viewer for images/pdfs.
    ☐ Chat.
    
  Views:
    ☐ List.
      ☐ Display/Hide set of columns for list of items and store in local storage.
    ☐ Single Form.
    ☐ Catalog.
    ☐ About.
    ☐ Search in system.
    -------------------------------------
    ☐ Recursive List.